CREATE TABLE IF NOT EXISTS a (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    value INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS b (
    id SERIAL PRIMARY KEY,
    a_id INTEGER NOT NULL REFERENCES a(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    value INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS c (
    id SERIAL PRIMARY KEY,
    b_id INTEGER NOT NULL REFERENCES b(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    value INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS d (
    id SERIAL PRIMARY KEY,
    c_id INTEGER NOT NULL REFERENCES c(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    value INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS e (
    id SERIAL PRIMARY KEY,
    d_id INTEGER NOT NULL REFERENCES d(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    value INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS f (
    id SERIAL PRIMARY KEY,
    e_id INTEGER NOT NULL REFERENCES e(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    value INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS g (
    id SERIAL PRIMARY KEY,
    f_id INTEGER NOT NULL REFERENCES f(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    value INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- CREATE INDEX idx_b_a_id ON b(a_id);
-- CREATE INDEX idx_c_b_id ON c(b_id);
-- CREATE INDEX idx_d_c_id ON d(c_id);
-- CREATE INDEX idx_e_d_id ON e(d_id);
-- CREATE INDEX idx_f_e_id ON f(e_id);
-- CREATE INDEX idx_g_f_id ON g(f_id);